apiVersion: v1
kind: Template
metadata:
  name: pbw-liberty
  annotations:
    openshift.io/display-name: Plants by WebSphere on Liberty
    description: Plants by WebSphere on Liberty App using MariaDB as the database
    tags: liberty,websphere
    openshift.io/provider-display-name: IBM Client Dev Advocacy.
    openshift.io/documentation-url: https://github.com/ibmappmodernization/app-modernization-plants-by-websphere-jee6.git
    openshift.io/support-url: https://access.redhat.com
labels:
  app: pbw-liberty-mariadb
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: The name for the application.
  value: pbw-liberty-mariadb
  required: true
- name: APPLICATION_HOSTNAME
  displayName: Application hostname
  description: 'Custom hostname for service routes.  Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
  value: ''
  required: false
- name: GIT_URI
  description: Git source URI for application
  displayName: Git source URI for application
  value: https://github.com/changeme/app-modernization-plants-by-websphere-jee6.git
  required: true
- name: PBW_DB_SERVICE
  displayName: Name of database service
  description: Name of database service
  value: mariadb
  required: true
- name: GENERIC_TRIGGER_SECRET
  displayName: Generic build trigger secret
  description: Generic build trigger secret
  from: "[a-zA-Z0-9]{8}"
  generate: expression
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    triggers:
    - type: Generic
      generic:
        secret: "${GENERIC_TRIGGER_SECRET}"
    - type: ImageChange
      imageChange: {}
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: s2i-liberty-javaee7:1.0
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: "${APPLICATION_NAME}"
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ''
    tags:
    - tag: latest

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    labels:
      deploymentConfig: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    triggers:
     - type: ImageChange
       imageChangeParams:
         automatic: true
         containerNames:
         - "${APPLICATION_NAME}"
         from:
           kind: ImageStreamTag
           name: "${APPLICATION_NAME}:latest"
     - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
      spec:
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          ports:
          - name: http
            containerPort: 9080
            protocol: TCP
          - name: https
            containerPort: 9443
            protocol: TCP
          - name: debug
            containerPort: 7777
            protocol: TCP
          env:
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${PBW_DB_SERVICE}"
          - name: DB_PORT
            value: '3306'
          - name: DB_HOST
            value: "${PBW_DB_SERVICE}"
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${PBW_DB_SERVICE}"
          resources:
            limits:
              cpu: 300m
              memory: 300Mi
            requests:
              cpu: 5m
              memory: 250Mi
          imagePullPolicy: Always
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- apiVersion: v1
  kind: Route
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's http service
  spec:
    host: "${APPLICATION_HOSTNAME}"
    tls:
      termination: edge
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      description: The app server's http port
  spec:
    ports:
    - protocol: TCP
      port: 9080
      targetPort: 9080
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
